<?php
/**
 * Implementation of hook_init().
 */
function fb_util_init() {

}

/**
  * Implementation of hook_perm()
  */
function fb_util_perm() {
  return array('administer contest date');;
}

/**
 * Implementation of hook_menu().
 */
function fb_util_menu() {
  $items['admin/settings/fb_util'] = array(
      'title' => 'Facebook Util',
      'description' => 'Facebook util settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fb_util_settings_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'fb_util.admin.inc'
  );


  $items['admin/content/idea/settings'] = array(
      'title' => t('Idea Contest Settings'),
      'description' => t('Allow for user vote'),
      'access arguments' => array('administer contest date'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('manage_contest_form'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'fb_util.admin.inc',
  );

  $items['facebook/util/category/list'] = array(
    'title' => t('List Category'),
    'page callback' => 'list_category',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['facebook/util/get_contest_start'] = array(
      'title' => t('Get contest start'),
      'page callback' => 'get_contest_started',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['facebook/util/idea/list'] = array(
      'title' => t('List Idea Utility'),
      'page callback' => 'list_idea_util',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  $item_tmp = $items['facebook/util/idea/list'];
  $item_tmp['page arguments'] = array(4);
  $items['facebook/util/idea/list/%'] = $item_tmp;


  $items['facebook/page/idea/list'] = array(
      'title' => t('List idea'),
      'page callback' => 'show_list_idea_page',
      'type', MENU_CALLBACK,
      'access arguments' => array('access content'),
      'file' => 'list_idea.inc',
  );

  $items['facebook/util/idea/post'] = array(
    'title' => t('Post Idea'),
    'page callback' => 'post_idea',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['facebook/util/verify'] = array(
    'title' => t('Verify FB'),
    'page callback' => 'verify_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['facebook/util/getnodeterm/%'] = array(
      'title' => 'Get Node Term',
      'page arguments' => array(3),
      'access arguments' => array('access content'),
      'page callback' => 'get_node_term_from_facebook_post_id',
      'type' => MENU_CALLBACK,
  );

  $items['facebook/util/vote/get/%'] = array(
      'title' => 'Get Vote Num',
      'page arguments' => array(4),
      'access arguments' => array('access content'),
      'page callback' => 'page_get_vote_number_from_post_id',
      'type' => MENU_CALLBACK,
  );

  $items['facebook/util/vote/toggle/%'] = array(
      'title' => 'Add vote',
      'page arguments' => array(4),
      'access arguments' => array('access content'),
      'page callback' => 'page_toggle_vote_number_from_post_id',
      'type' => MENU_CALLBACK,
  );

  $items['facebook/util/getnode/%'] = array(
      'title' => 'Get Node',
      'page arguments' => array(3),
      'access arguments' => array('access content'),
      'page callback' => 'page_get_node_from_facebook_post_id',
      'type' => MENU_CALLBACK,
  );

  $items['facebook/util/delta/get/%/%'] = array(
      'title' => 'Get Delta Number',
      'access arguments' => array('access content'),
      'page arguments' => array(4, 5),
      'page callback' => 'page_get_delta_from_post_id',
      'type' => MENU_CALLBACK,
  );

  $items['facebook/page/idea/post'] = array(
      'title' => 'Show Tab Page',
      'page callback' => 'show_post_idea_page',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'post_idea.inc');

  return $items;
}


function post_idea() {
  $app_secret = variable_get('fb_util_app_secret_key', '');
  $fb_session = json_decode($_POST['fb_util_data'], TRUE);
  $fb_post_object = json_decode($_POST['fb_post_object']);
  $fbuid = $fb_session->uid;
  $validated_session = validate_facebook_session($fb_session, $app_secret);
  $fb_drupal = json_decode($_POST['fb_util_drupal']);
  if ($validated_session) {
    $tid = $fb_drupal->tid;
    $orig = node_load();
    $node = $orig;
    $node->type = 'idea';
    $node->body = $fb_drupal->message;
    $node->title = $fb_post_object->from->name;
    $node->field_fbuid[0]['value'] = $validated_session['uid'];
    $node->field_facebook_post_id[0]['value'] = $fb_drupal->post_id;
    $node->field_facebook_session[0]['value'] = $_POST['fb_util_data'];
    $node->field_facebook_post_object[0]['value'] = $_POST['fb_post_object'];
    $node->taxonomy = array($tid => taxonomy_get_term($tid));

    $node->field_fb_name[0]['value'] = $fb_post_object->from->name;
    node_save($node);

    if ($node->changed != $orig->changed) {
       print 'Updated';
    }
    else {
      print 'Unable to update.';
    }
  }
  else {
    print 'fail';
  }

  return ;

}

function list_idea() {
  return "LIST IDEA";
}

function list_idea_util($term_id = NULL) {
  print 'list_idea_util';
  if ($term_id) {
    $selection = array($term_id);
  }
  else {
    $selection = array();
    $activity_term_tree = taxonomy_get_tree(11);
    foreach ($activity_term_tree as $term) {
      array_push($selection, $term->tid);
    }
  }
  $node = taxonomy_select_nodes($selection) ;
  while($data = db_fetch_object($node)) {
    $data_load = node_load($data->nid);
    if (is_node_type(&$data_load, 'idea')) {
      print_r($data_load);
    }
  }
  return;
}
function list_category() {
  $activity_term_tree = taxonomy_get_tree(11);
  print drupal_json($activity_term_tree);
  return;
}

function load_nid_in_type($node_type) {
  $result = db_query("SELECT nid FROM node WHERE type = %s", $node_type);

  $nids = array();
  while ($obj = db_fetch_object ($result)) {
    $nids[] = $obj->nid;
  }
  return $nids;
}

function is_node_type(&$node, $node_type) {
  $return_flag = FALSE;
  if ($node->type == $node_type) {
    $return_flag = TRUE;
  }
  return $return_flag;
}
function validate_facebook_session($args, $app_secret) {
  $payload = '';
  ksort($args);
  foreach ($args as $key => $value) {
    if ($key != 'sig') {
      $payload .= $key . '=' . $value;
    }
  }
  $hash_in = $payload . $app_secret;
  $sig = $args['sig'];
  if (md5($hash_in) != $sig) {
    return null;
  }
  return $args;
}
// unused for now
/*
function select_nodes_by_content_type_not_in_vocabulary($vocab_id, $content_type){
	$result = db_query(
	   "SELECT * FROM {node} WHERE nid NOT IN (
		SELECT nid FROM {term_node} AS tn
		LEFT JOIN {term_data} AS td ON tn.tid = td.tid
		WHERE td.vid = %d)
		AND type = '%s'", $vocab_id , $content_type
	);
	return $result;
}
*/

function verify_js() {
  Header('Location: http://www.facebook.com/happyschoolbreak?sk=app_168099556581644');
  return;
}

function get_contest_started() {
  $status = variable_get('fb_contest_started', false);
  $_ret =  drupal_json(array('status' => $status));
  return $_ret;
}
function get_node_term_from_facebook_post_id($post_id) {
  $node_status_code = 1;
  $is_contest_started = variable_get('fb_contest_started', false);
  if ($is_contest_started == false) {
    $query = sprintf("SELECT node.nid AS nid FROM node node  LEFT JOIN content_type_idea node_data_field_facebook_post_id ON node.vid = node_data_field_facebook_post_id.vid WHERE (node_data_field_facebook_post_id.field_facebook_post_id_value) = ('%s') AND node.status = %d", $post_id, $node_status_code);
  }
  else {
    $query = sprintf("SELECT node.nid AS nid FROM node node  LEFT JOIN content_type_idea node_data_field_facebook_post_id ON node.vid = node_data_field_facebook_post_id.vid WHERE (node_data_field_facebook_post_id.field_facebook_post_id_value) = ('%s') AND (node.status=%d AND node.promote=1)", $post_id, $node_status_code);
  }
  $nid = db_result(db_query($query));
  $node = node_load($nid);
  $term = taxonomy_node_get_terms($node);
  drupal_json(array_values($term));
  return;
}

function page_get_node_from_facebook_post_id($post_id) {
  $node = _get_node_from_facebook_post_id($post_id);
  drupal_json(($node));
  return;
}

function _get_node_from_facebook_post_id($post_id) {
  $node_status_code = 1;
  $query = sprintf("SELECT node.vid AS vid, node.nid AS nid FROM node node  LEFT JOIN content_type_idea node_data_field_facebook_post_id ON node.vid = node_data_field_facebook_post_id.vid WHERE (node_data_field_facebook_post_id.field_facebook_post_id_value) = ('%s') AND node.status = %d ", $post_id, $node_status_code);
  $r = db_query($query);
  $node = db_fetch_object($r);
  //print get_delta_from_nid_fbuid($node->nid, '8910');
  return $node;
}

function _get_delta_from_nid_fbuid($nid, $fbuid) {
  $delta = db_result(db_query("SELECT delta FROM {content_field_fbuid_vote} WHERE field_fbuid_vote_value = '$fbuid' AND nid = '$nid'", $nid, $fbuid));
  return $delta;
}

function _get_delta_from_post_id($post_id, $fbuid) {
  $node = _get_node_from_facebook_post_id($post_id);
  $delta = _get_delta_from_nid_fbuid($node->nid, $fbuid);
  return $delta;
}

function page_get_delta_from_post_id($post_id, $fbuid) {
  drupal_set_header('Content-Type: application/json; charset=utf-8');
  _get_vote_number_from_post_id($post_id);
  drupal_json(array('delta' => _get_delta_from_post_id($post_id, $fbuid)));
  return;
}

function _get_vote_number_from_post_id($post_id) {
  $node = _get_node_from_facebook_post_id($post_id);
  $node = node_load($node->nid);
  $collection = array();
  foreach ($node->field_fbuid_vote as $vote_fbuid) {
    if (!empty($vote_fbuid['value'])) {
      $collection[] = $vote_fbuid;
    }
  }
  $vote_num =  count($collection);
  return $vote_num;
}

function page_get_vote_number_from_post_id($post_id) {
   $vote_num = _get_vote_number_from_post_id($post_id);
   print drupal_json(array('votenum' => $vote_num));
   return;
}

function page_toggle_vote_number_from_post_id($post_id) {
  $fb_session = json_decode($_POST['fb_session']);
  $fbuid = $fb_session->uid;

  $app_secret = variable_get('fb_util_app_secret_key', '');
  $fb_post_object = json_decode($_POST['fb_post_object']);
  $validated_session = validate_facebook_session((array)$fb_session, $app_secret);

  $result = array();

  $_contest_status = variable_get('fb_contest_started', false);
  if ($validated_session == NULL || $_contest_status == false) {
    return drupal_json(array('status' => 'unvote', 'api_status' => 'failed'));
  }
  //Liked
  $delta = _get_delta_from_post_id($post_id, $fbuid);
  if ($delta) {
    $node = _get_node_from_facebook_post_id($post_id);
    if (_remove_fbuid_from_node($node->nid, $delta, $fbuid)) {
      $result = array('status' => 'unvote', 'api_status' => 'passed');
    }
    else {
      $result = array('status' => 'voted', 'api_status' => 'failed');
    }
    $result['operation'] = 'remove';
  }
  else {
    $inserted = _insert_fbuid_to_node($post_id, $fbuid);
    if ($inserted) {
      $result = array('status' => 'voted', 'api_status' => 'passed');
    }
    else {
      $result = array('status' => 'unvote', 'api_status' => 'failed');
    }
    $result['operation'] = 'insert';
  }
    cache_clear_all('*', 'cache_content', TRUE);
    print drupal_json($result);
    return ;
  /*$fb_session = json_encode($_POST['fb_session']);
  _insert_fbuid_to_node($post_id);
  */
}

function _insert_fbuid_to_node($post_id, $fbuid) {
  $delta = _get_delta_from_post_id($post_id, $fbuid);
  if ($delta == FALSE) {
    //insert
    $node = _get_node_from_facebook_post_id($post_id);
    $max_delta  = db_result(db_query('SELECT MAX(delta)+1 FROM {content_field_fbuid_vote}'));
    $inserted = db_query("INSERT INTO {content_field_fbuid_vote} (vid, nid, delta, field_fbuid_vote_value) VALUES (%d, %d, %d, '%s')", $node->nid, $node->vid, $max_delta, $fbuid);
    }
  return $inserted;
}

function _remove_fbuid_from_node($nid, $delta, $fbuid) {
    $removed = db_query("DELETE FROM {content_field_fbuid_vote} WHERE nid=%d AND delta=%d AND field_fbuid_vote_value='%s'",
        $nid, $delta, $fbuid);
    return $removed;
}
